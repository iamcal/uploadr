NOTES

Expand gm.thumb to return the date taken as well for use in sorting
	MySQL format would be nice, as that is string-sortable

Offer a preference to not create thumbnails in the name of speed
	Accomplish this with special case param of thumbSize = 0 to gm.thumb
	This will still return the date taken but will not actually do the thumbing

As of 8-21-2007
	Thumbing 127 8 MP JPEGs
		Uploadr 3 Mac		97 seconds
		Uploadr 3 Win		278 seconds
		Uploadr 2.5 Win		312 seconds



9-7-2007 meeting with Gino & Stewart

Make sure it's smart when network drops
*** Partial batch tagging - tag a >1 photo selection all at once - append to individual tags
Tooltips on toolbar buttons
Save state of unuploaded photos on exit
Tabs for batches (two total - the uploading batch and the editing batch)
	When you start upload, create a new tab for the next batch
	jUploadr/Chronic style photo progress indication
	User must DO SOMETHING to get to the new batch once uploading starts (button to switch tabs)
Ordering options instead of a default
	Date taken (fallback to alpha if date taken not available)
	Let me order them
	Reverse the current thing

Twiki page!

Look into embedding Flash into the Uploadr - Picnik



Drag selecting photos
	I couldn't figure out any way other than hardcoding the offsets to make the box actually
	track the cursor.  document.getElementById('photos').offsetTop isn't set?!



9-12-2007 meeting with Gino & Stewart

Partial batch metadata
	Overwrite titles always
	Append to description always (prefix with \n\n)
		Could have a pref for append/overwrite for description - nah
	Confirmation on clicking save
	*** Make blank title or description not overwrite each photo ***
		Do all partial batches like the changed_* checks in settings.js
	"Leave unchanged" checkbox for privacy metadata that unchecks if they change something
Re-adding to a batch after failure
	Preserve order in the queue, which is the order they wanted
Add add-to-set option for each photo and for partial batches
Nix the per-photo resize options



In case we ever want to set PROPER EXIF orientation rather than actually rotating pixels,
here is the C code:

long orient = exif["Exif.Image.Orientation"].toLong();
if (1 > orient || 8 < orient) {
	orient = 1;
}
switch (orient) {
	case 1:
		if (90 == degrees) {
			orient = 6;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 8;
		}
	break;
	case 2:
		if (90 == degrees) {
			orient = 5;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 7;
		}
	break;
	case 3:
		if (90 == degrees) {
			orient = 8;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 6;
		}
	break;
	case 4:
		if (90 == degrees) {
			orient = 7;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 5;
		}
	break;
	case 5:
		if (90 == degrees) {
			orient = 4;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 2;
		}
	break;
	case 6:
		if (90 == degrees) {
			orient = 3;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 1;
		}
	break;
	case 7:
		if (90 == degrees) {
			orient = 2;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 4;
		}
	break;
	case 8:
		if (90 == degrees) {
			orient = 1;
		} else if (-90 == degrees || 270 == degrees) {
			orient = 3;
		}
	break;
	default:
	break;
}
exif["Exif.Image.Orientation"] = uint32_t(orient);
