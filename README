Flickr Uploadr

Copyright (c) 2007-2008 Yahoo! Inc.  All rights reserved.  This library is
free software; you can redistribute it and/or modify it under the terms of
the GNU General Public License (GPL), version 2 only.  This library is
distributed WITHOUT ANY WARRANTY, whether express or implied. See the GNU
GPL for more details (http://www.gnu.org/licenses/gpl.html)



Development environment
------------------------------------------------------------------------

Download the Flickr Uploadr source archive from:
  http://flickr.com/tools/uploadr/

XULRunner trunk builds can be found at:
  ftp://ftp.mozilla.org/pub/mozilla.org/xulrunner/nightly/latest-trunk/

If you are on Windows, download a version of XULRunner trunk and unzip
it into:
  UPLOADR/MacUploadr.app/Contents/Resources/

If you are on a Mac you have two more steps.  First install the Mac
version of XULRunner, which will live in /Library/Frameworks.  Then
run this (substituting your path to UPLOADR as necessary):
  $ mkdir UPLOADR/MacUplaodr.app/Contents/Frameworks
  $ sudo mv /Library/Frameworks/XUL.framework \
      UPLOADR/MacUploadr.app/Contents/Frameworks

To build the XPCOM components you will need the Gecko SDK.  PPC Mac
and Windows versions are available here:
  http://developer.mozilla.org/en/docs/Gecko_SDK#Downloading

An Intel Mac version is available here:
  http://www.oxymoronical.com/view/1114

The SDKs should be placed in the following directories:
  UPLOADR/MacUploadr.app/Contents/Resources/gecko-sdk.mac (Intel Mac)
  UPLOADR/MacUploadr.app/Contents/Resources/gecko-sdk.ppc (PPC Mac)
  UPLOADR/MacUploadr.app/Contents/Resources/gecko-sdk.win (Windows)

The Windows XPCOM extensions can be built using Visual Studio 2005.
The Mac XPCOM extensions can be built using the included Makefile.
Running `make` with no arguments will give you the available targets.

Under Windows, you'll also need bits from Mozilla's Wintools.  You can
download Wintools here:
  http://ftp.mozilla.org/pub/mozilla.org/mozilla/source/wintools.zip

Extract that and copy glib-1.2.dll and libIDL-0.6.dll from
wintools/buildtools/windows/bin/x86/ to your gecko-sdk.win/bin/ directory.



API Keys
------------------------------------------------------------------------

You'll need your own API key and secret from Flickr to build Uploadr.
These can be obtained at http://flickr.com/services/api/.  The key
and secret must be placed in flKey.cpp as indicated.  This file is at:
  UPLOADR/MacUploadr.app/Contents/Resources/components/flKey.cpp

The API key is stored as a string.  The secret is stored as individual
characters so it is not easily readable from the binary.



GraphicsMagick
------------------------------------------------------------------------

Windows
-------

Download GraphicsMagick Windows SOURCE from:
  ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/

Go to the VisualMagick/configure directory of the GraphicsMagick Windows
source directory.  Edit the project configuration as follows:
  o Set the active configuration to "Release"
  o Change the Use of MFC under Configuration Properties > General to
    "Use MFC in a Static Library"
  o Change the Runtime Library under Configuration Properties > C/C++ >
    Code Generation to "Multi-threaded (/MT)"

Build and run the configuration program, selecting "Static
Multi-threaded runtimes" and otherwise accepting defaults.  This will
create your solution for Visual Studio.

Open the solution and let Visual Studio 8 have its way with the Visual
Studio 7 solution file.  Make the following changes:
  o Change the Runtime Library for the CORE_Magick++ project under
    Configuration Properties > C/C++ > Code Generation to
    "Multi-threaded DLL (/MD)"
  o Tell all of the CORE_* projects to optimize for speed under
    Configuration Properties > C/C++ > Optimization

Build it to see where the problems are.  As of 1.1.8, 18 out of 20
projects build properly.  The two that do not are utilities that are
extraneous.  In 1.1.7, the errors that will likely show up in a
try/catch block can be fixed by changing "exception" to "std::exception"
and adding "&" to make all of the catches happen by reference.

Add the path to your GraphicsMagick build's VisualMagick\lib directory
to your library path.  Add the path to VisualMagick\include to your
include path.

For Windows, the magic.mgk, modules.mgk and delegates.mgk files must be
in the root of the application (with application.ini).

Mac
---

First make sure you install MacPorts from:
  http://svn.macosforge.org/repository/macports/downloads/MacPorts-1.5.0/

Then run these commands:
  $ sudo port install jpeg configure.flags=-O3
  $ sudo port install tiff configure.flags=-O3
  $ sudo port install libpng
  $ sudo port install libidl

Download GraphicsMagick from:
  ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/

Configure and install GraphicsMagick like this:
  $ ./configure \
    CFLAGS="-O3" \
    CXXFLAGS="-O3" \
    CPPFLAGS="-I/opt/local/include -I/usr/local/include" \
    LDFLAGS="-L/opt/local/lib -L/usr/local/lib" \
    --without-x --without-perl \
    --disable-installed \
    --without-dps --without-fpx --without-jbig --without-jp2 \
    --without-lcms --without-trio --without-ttf --without-wmf \
    --with-quantum-depth=16
  $ make && sudo make install

Because of dynamic/static linker weirdness, after building GraphicsMagick,
move libjpeg.dylib, libtiff.dylib and libpng.dylib out of the way like this:
  $ sudo mv /opt/local/lib/libjpeg.dylib /opt/local/lib/libjpeg.dylib.sav
  $ sudo mv /opt/local/lib/libtiff.dylib /opt/local/lib/libtiff.dylib.sav
  $ sudo mv /opt/local/lib/libpng.dylib /opt/local/lib/libpng.dylib.sav

For Mac, the magic.mgk, modules.mgk and delegates.mgk files must be in
Contents/lib/GraphicsMagick-<version>/config/.



EXIV2
------------------------------------------------------------------------

Download Exiv2 source from:
  http://exiv2.org/download.html

Windows
-------

Just like GraphicsMagick, let Visual Studio 8 eat the 7.1 project files
and then make the following changes:
  o Disable every project in the Exiv2 solution except exiv2lib and xmpsdk
  o Change the Runtime Library for remaining projects under
    Configuration Properties > C/C++ > Code Generation to
    "Multi-threaded DLL (/MD)"
  o Set remaining projects to their Release state
      o But in the steps below, pull base values from Debug and  make
        changes in All Configurations
  o Add Expat to the xmpsdk project
      o Change Configuration Properties > C/C++ > General >
        Additional Include Directories to
        "C:\Program Files\Expat 2.0.1\Source\lib" (or your equivalent),
      o Change Configuration Properties > Librarian > General >
        Additional Dependencies to "libexpat.lib"
      o Change Configuration Properties > Librarian > General >
        Additional Library Directories to "C:\Program Files\Expat 2.0.1\Bin"
  o Set the exiv2lib project's Configuration Properties > Librarian >
    General > Link Library Dependencies to "Yes"
  o Copy libexpat.dll from C:\Program Files\Expat 2.0.1\Bin to
    UPLOADR\MacUploadr.app\Contents\Resources
  o Ignore the rest of the Exiv2 README



Mac
---

In Unix-land, it's easy!
  $ sudo port install libiconv
  $ sudo port install expat
  $ sudo port install xml2
  $ ./configure --disable-shared --with-expat=/opt/local
  $ make && sudo make install

Again because of static linker weirdness, after building Exiv2, run
these commands.
  $ sudo mv /opt/local/lib/libiconv.dylib /opt/local/lib/libiconv.dylib.sav
  $ sudo mv /opt/local/lib/libexpat.dylib /opt/local/lib/libexpat.dylib.sav
  $ sudo mv /opt/local/lib/libxml2.dylib /opt/local/lib/libxml2.dylib.sav



FFmpeg
------------------------------------------------------------------------

Checkout FFmpeg like this:
  $ svn co -r 10885 svn://svn.mplayerhq.hu/ffmpeg/trunk ffmpeg
  $ cd ffmpeg

Windows
-------

Do all of the MSys/MinGW stuff to get up and running.
  http://arrozcru.no-ip.org/ffmpeg_wiki/tiki-index.php

Additionally add in dependencies like zlib this way:
  http://wiki.videolan.org/Win32CompileMSYS

Once that's all up and running, time to configure/make/install.
  $ ./configure --disable-ffserver --disable-ffplay --enable-gpl \
    --enable-memalign-hack --enable-static --disable-shared \
    --disable-debug
  $ make && make install

The Uploadr Visual Studio project is setup to expect the MinGW bits for
linking FFmpeg into the flGM XPCOM object.

Mac
---

  $ ./configure --disable-ffserver --disable-ffplay --enable-gpl \
    --disable-vhook --disable-mmx --enable-static --disable-shared \
    --extra-cflags=-fno-common --disable-debug
  $ make && sudo make install



Building XPCOM components
------------------------------------------------------------------------

Windows
-------

Use the Visual Studio projects in:
  UPLOADR/MacUploadr.app/Contents/Resources/components/*.vcproj

Mac
---

Use the Makefile in:
  UPLOADR/MacUploadr.app/Contents/Resources/components/

After rebuilding the XPCOM extensions you must increment the BuildID
defined in:
  UPLOADR/MacUploadr.app/Contents/Resources/application.ini



Building Flickr Uploadr
------------------------------------------------------------------------

Windows
-------

On Windows, there is very little left to be done.  The root of your
application is actually:
  UPLOADR/MacUploadr.app/Contents/Resources/

Copy xulrunner-stub.exe from the xulrunner/ directory into the root
of your app, rename it to "Flickr Uploadr.exe" and double-click it
to run Uploadr.

Mac
---

On Mac, the app can be launched by double-clicking on MacUploadr.app
in Finder.



Software Update Service
------------------------------------------------------------------------

Windows
-------

?

Mac
---

Info on how to build MAR files is here:

  http://wiki.mozilla.org/Software_Update:HowToManuallyGenerateMARFiles

Start with your mozconfig file, XULRunner style:

  http://developer.mozilla.org/en/docs/XULRunner:Build_Instructions

Then a regular Mozilla build environment, following these:

  http://developer.mozilla.org/en/docs/Mac_OS_X_Build_Prerequisites

Altogether, at this point it should look like this:

  ~/.mozconfig:
  mk_add_options MOZ_CO_PROJECT=all
  ac_add_options --with-macos-sdk=/Developer/SDKs/MacOSX10.4u.sdk
  ac_add_options --disable-javaxpcom
  ac_add_options --enable-application=xulrunner

  $ cvs -d :pserver:anonymous:anonymous@cvs-mirror.mozilla.org:/cvsroot co \
    mozilla/client.mk
  $ cd mozilla
  $ make -f client.mk checkout
  $ make -f client.mk build

There may be an easier way, something like what Songbird does:

  http://publicsvn.songbirdnest.com/browser/trunk/build/mozconfig/ \
    xulrunner.windows.debug.i686.mozconfig

